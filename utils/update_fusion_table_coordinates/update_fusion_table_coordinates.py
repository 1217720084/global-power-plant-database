# This Python file uses the following encoding: utf-8
"""
Global Power Plant Database
update_fusion_table_coordinates.py
Read list of coordinates from external file, linked to plant IDs.
Update fusion tables to write coordinates to appropriate plant row.
"""

import os
import csv
import sys
import httplib2
import time
import json

from oauth2client.service_account import ServiceAccountCredentials
from oauth2client.crypt import Signer
from apiclient.discovery import build
KEYFILE = '../../resources/api_keys/fusion_tables_service_key.json'
COUNTRYFILE = '../../resources/country_information.csv'
COORDFILE = '../assemble_coordinates/assembled_coordinates_CARMA.csv'
CHANGELOG = './changelog_coordinates.csv'

scopes = ['https://www.googleapis.com/auth/fusiontables']
credentials = ServiceAccountCredentials.from_json_keyfile_name(KEYFILE, scopes=scopes)
http_auth = credentials.authorize(httplib2.Http())

# build fusion table API
ft_api = build('fusiontables', 'v2', http_auth)
# get an object that can build API query requests
query_api = ft_api.query()

def get_rows_with_coords(ftid):
    """Query a fusion table and return a list of [ROWID, PWID, LAT, LON]."""
    q = query_api.sql(sql="SELECT ROWID, \'Power Plant ID\', \'Latitude\', \'Longitude\' from {ftid}".format(ftid=ftid), hdrs=True, typed=False).execute()
    return q['rows']

def update_latlong(ftid, rowid, lat, lon, source):
    """Update a single fusion table row with new geolocation information."""
    try:
        int(pwid)
        assert float(lat) > -90
        assert float(lat) < 90
        assert float(lon) > -180
        assert float(lon) < 180
        assert source in ['GEODB','CARMA']
    except:
        print "[ERROR]", "{pwid} with lat={lat}, lon={lon}".format(pwid=pwid,lat=lat,lon=lon)
        return

    sql_statement = "UPDATE {ftid} SET \'Latitude\' = \'{lat}\', \'Longitude\' = \'{lon}\', \'Geolocation Source\' = \'{source}\' WHERE ROWID = \'{rowid}\'"
    q = query_api.sql(sql=sql_statement.format(ftid=ftid,lat=lat,lon=lon,source=source,rowid=rowid)).execute()
    # TODO: could print or return a confirmation?

# read the country information file
# [ ['primary_country_name','iso_country_code','iso_country_code2','has_api','use_geo','nation','geo_country','carma_country','idea_country','google_country','fusion_table_id'], [...], ...]
with open(COUNTRYFILE) as fin:
    reader = csv.DictReader(fin)
    all_countries = [r for r in reader]
# get {ISO: table_id} dict
FTIDS = {r['iso_country_code']: r['fusion_table_id'] for r in all_countries}

# read list of plants to modify and make dict by pwid - generated by assemble_coordinates.py
# [ ['wri_id','coord_source','latitude','longitude'], [...], ... ]
with open(COORDFILE) as fin:
    reader = csv.DictReader(fin)
    all_plants = [r for r in reader]
# get {PWID: plant} dict
PLANTIDS = {r['wri_id'].strip('WRI'): r for r in all_plants}

# main loop
with open(CHANGELOG,'a') as fout:
    changelog = csv.writer(fout)
    changed_list = []

    # loop through country-by-country 
    for iso,ftid in FTIDS.iteritems():
        print iso

        # some countries do not have fusion tables; skip them
        if not ftid:
            continue
        
        # get all rows of country's fusion table
        current_rows = get_rows_with_coords(ftid)

        # loop through rows
        for plant in current_rows:
            rowid = plant[0]
            pwid = plant[1]
            current_lat = plant[2]
            current_lon = plant[3]

            # don't update rows that already have coords
            if current_lat or current_lon:
                continue        

            # check if there's a match for this plant
            if pwid in PLANTIDS.keys():
                p = PLANTIDS[pwid]
                new_lat = float(p['latitude'])
                new_lon = float(p['longitude'])
                new_source = p['coord_source']
                # hack
                if new_source == 'GEO':
                    new_source = 'GEODB'

                # do update
                try:
                    print "- Trying to update", pwid, "(", iso, ") with rowid = ", rowid, "..."
                    update_latlong(ftid,rowid,new_lat,new_lon,new_source)
                    time.sleep(1.125)   # stay under rate limits
                except Exception as e:
                    print '[UPDATE ERROR]', e.message
                    if 'Rate Limit' in e.message:
                        time.sleep(25)  # sleep off rate limit
                else:
                    # log change
                    log_entry = [iso,pwid,new_source,'CARMA/GEO Location Integration [lat: {lat}, lon: {lon}]'.format(lat=new_lat, lon=new_lon)]
                    changed_list.append(log_entry)
                    changelog.writerow(log_entry)

